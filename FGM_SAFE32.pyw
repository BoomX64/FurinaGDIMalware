import win32gui
import win32api
import win32con 
import ctypes
import random
import math
import time
from bytebeat.ByteBeat import *
import tkinter as tk
from tkinter import messagebox
root = tk.Tk()


class main_application():
  def __init__(self):
    super().__init__()

    msg_box = tk.messagebox.askquestion(
        "WARNING!!",
        "THIS MALWARE CAN DESTROY YOUR SYSTEM!!!/n/nYOU CANNOT SAVE ANY DATA AFTER YOUR COMPUTER WERE RESTARTED./nAre you sure to execute this application?",
        icon="warning",
    )
    if msg_box == "yes":
      msg_box2 = tk.messagebox.askquestion(
        "LAST WARNING!!!",
        "If you start this malware, this malware will turn this device into the unbootable devices./n/nContinue?,
        icon="warning",
      )
      if msg_box2 == "yes":
        self.change_backgroud()
        time.sleep(2)
    
        self.playload_01()
        time.sleep(30)
    
        self.playload_02()
        time.sleep(30)

        bsod()
      else msg_box2 == "no":
        root.destroy()
        
    else msg_box == "no":
        root.destroy()

def change_background(self):
  background_path = "images.jpeg"
  ctypes.windll.user32.systemParameterInfoW(20, 0, background_path, 0)

def playload_01(self):
  user32 = ctypes.windll.user32
  user32.SetProcessDPIAware()
  [sw, sh] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
  hdc = win32gui.GetDC(0)

  while True:
    win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, -3,-3, win32con.NOTSRCCOPY)
    ByteBeat.play(
      '( ( t & ( ( t >> 18 ) + ( ( t >> 11 ) & t ) ) ) * t + ( ( ( t >> 8 & t ) - ( t >> 3 & t >> 8 | t >> 16 ) ) & 128 ) )', # The mathematical input, as a string.
      10,         # The amount of seconds to play.
      8000,       # KiloHertz (kHz) for the ByteBeat.
      True        # Wait until the ByteBeat finished or not.
    )

def playload_02(self):
  hdc = win32gui.GetDC(0)
  user32 = ctypes.windll.user32
  user32.SetProcessDPIAware()
  [w, h] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)]

  x = y = 0
  while True:
      win32gui.DrawIcon(hdc, x , y , win32gui.LoadIcon(None, win32con.IDI_ERROR)) # Change IDI_ERROR to something else to change the icon being displayed
      x = x + 30
      if x >= w:
        y = y + 30
        x = 0
      if y >= h:
        x = y = 0
      ByteBeat.play(
        't%0.81*t', # The mathematical input, as a string.
        10,         # The amount of seconds to play.
        8000,       # KiloHertz (kHz) for the ByteBeat.
        True        # Wait until the ByteBeat finished or not.
      )

def bsod():
  tk.messagebox.showinfo("It is safe version", "This is a safe version. it is safe to use the computer.")


application = main_application()
#this is the last time i update this version.
#and in the future i will not update this version and delete this repository.
